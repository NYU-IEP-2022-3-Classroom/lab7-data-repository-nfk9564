{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NYU-IEP-2022-3-Classroom/lab7-data-repository-nfk9564/blob/main/Copy_of_magFitter2023.ipynblab7\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@title $\\gets$ Run Me First (I have the code setup and function definitions)\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import scipy.optimize\n",
        "from bisect import bisect_left, bisect_right\n",
        "import os, glob\n",
        "import itertools,operator\n",
        "from timeit import default_timer as timer\n",
        "from enum import Enum\n",
        "import json\n",
        "import time\n",
        "import scipy.optimize\n",
        "import scipy.interpolate\n",
        "\n",
        "gaccel = 9802 #mm/s^2\n",
        "\n",
        "class emptystruct:\n",
        "  pass\n",
        "\n",
        "def findOrbitFiles (startdir):\n",
        "  #(angleFiles,magFiles) = findSlopeAndAmplitudeFiles(startdir)\n",
        "  # input stardir: path to directory containing experiments\n",
        "  # output: list of paths to angle files\n",
        "  # output slopeFiles: dictionary with paths to slope files, key names are taken from directories under large bob\n",
        "  #   e.g. if large bob has a directory 2mm, then\n",
        "  #   slopeFiles[\"2mm\"] is a list of paths to all slope files (end _slope.txt) \n",
        "  #   under this directory, even in subdirectories\n",
        "  # output amplitudeFiles: same as slopeFiles, but paths to all files ending _angle.txt\n",
        "  #https://stackoverflow.com/questions/3964681/find-all-files-in-a-directory-with-extension-txt-in-python\n",
        "  #https://www.kite.com/python/answers/how-to-search-for-specific-files-in-subdirectories-in-python\n",
        "    #look 1,2, and 3 levels down\n",
        "    return sorted (glob.glob(startdir + '/**/**/*_orbit.txt') + glob.glob(startdir + '/**/*_orbit.txt') + glob.glob(startdir + '/**/**/**/*_orbit.txt') )\n",
        "def rreplace(s, old, new, occurrence):\n",
        "  #replace last instance https://stackoverflow.com/questions/2556108/rreplace-how-to-replace-the-last-occurrence-of-an-expression-in-a-string/59082116#59082116\n",
        "  li = s.rsplit(old, occurrence)\n",
        "  return new.join(li)\n",
        "# needed to check data validity\n",
        "# returns the indices of the first and last element of the largest sequence of true in a list of booleans\n",
        "def longestTrueSequence(seq):\n",
        "  #adapted from https://stackoverflow.com/questions/40166522/find-longest-sequence-of-0s-in-the-integer-list\n",
        "  r = max((list(y) for (x,y) in itertools.groupby((enumerate(seq)),operator.itemgetter(1)) if x), key=len)\n",
        "  return (r[0][0], r[-1][0])\n",
        "\n",
        "# Checking data validity (no missed swings, dt reasonable)\n",
        "# returns longest sequence of valid data\n",
        "def timeCheck(time,number):\n",
        "  dt = np.diff(time)\n",
        "  period = np.median(dt)\n",
        "  dn = np.diff(number)\n",
        "  maxperiod = 5 #equivalent to 6 meter pendulum\n",
        "  valid = (np.abs(dt -period) < 0.25*period) & (dn==2)\n",
        "  (start,stop) = longestTrueSequence(valid)\n",
        "  return (start,stop)\n",
        "\n",
        "def loadAndParseData (orbitFilePath, energyCalibrationFactor = 1, scale=None, max_rows=450000): #450k readings = 1500s\n",
        "  magFilePath = rreplace(orbitFilePath, 'orbit', 'mag',1)\n",
        "  pulseFilePath = rreplace(orbitFilePath, 'orbit', 'pulse',1)\n",
        "\n",
        "  e = emptystruct()\n",
        "  orbit = emptystruct()\n",
        "\n",
        "  ncross, tcross, majaxis, minaxis, theta, slope = np.loadtxt(orbitFilePath, skiprows = 1, unpack = True)\n",
        "\n",
        "  (start,stop) = timeCheck(tcross, ncross)\n",
        "  orbit.ncross = ncross[start:stop+1]\n",
        "  orbit.tcross = tcross[start:stop+1]\n",
        "  orbit.theta = theta[start:stop+1]\n",
        "  orbit.majaxis = majaxis[start:stop+1]\n",
        "  orbit.minaxis = minaxis[start:stop+1]\n",
        "  orbit.phi = scipy.interpolate.interp1d(orbit.tcross, np.pi*(orbit.ncross - orbit.ncross[0])); \n",
        "\n",
        "  e.orbit = orbit\n",
        "  e.period = np.mean(np.diff(orbit.tcross))\n",
        "  e.L = gaccel*(0.5*e.period/np.pi)**2\n",
        "\n",
        "  e.orbitPath = orbitFilePath\n",
        "  e.magPath = magFilePath\n",
        "  e.pulsePath = pulseFilePath\n",
        "\n",
        "  pulse = emptystruct()\n",
        "  try:\n",
        "    pulse.t, pulse.U, pulse.C, pulse.V, pulse.nc = np.loadtxt(pulseFilePath, skiprows = 1, unpack = True)\n",
        "  except:\n",
        "    pulse.t = np.empty((0,))\n",
        "    pulse.U = np.empty((0,))\n",
        "    pulse.C = np.empty((0,))\n",
        "    pulse.V = np.empty((0,))\n",
        "    pulse.nc = np.empty((0,))\n",
        "\n",
        "  e.pulse = pulse\n",
        "\n",
        "  mag = emptystruct()\n",
        "  (t,B) = loadMagFile(magFilePath, max_rows = max_rows)\n",
        "  valid = np.logical_and(t >= e.orbit.tcross[0], t <= e.orbit.tcross[-1])\n",
        "  mag.t = t[valid]\n",
        "  mag.B = B[:,:,valid]\n",
        "  mag.sensorLoc = np.array(((0,0,0), (-22.5,38.971,0), (-22.5, -38.971,0), (45,0,0)))\n",
        "  e.mag = mag\n",
        "\n",
        "  return e\n",
        "\n",
        "#time: t, shape N,\n",
        "#magnetic readings: b, shape nsensors x 3 x N\n",
        "def loadMagFile(magFilePath,max_rows=450000):\n",
        "  data = np.loadtxt(magFilePath, skiprows = 1, max_rows = max_rows)\n",
        "  t = data[:,0]\n",
        "  n = data[:,1::4]\n",
        "  mx = data[:,2::4]\n",
        "  my = data[:,3::4]\n",
        "  mz = data[:,4::4]\n",
        "\n",
        "  n = n.astype(int)\n",
        "  b = np.stack([np.stack((mx[n == i], my[n == i], mz[n==i])) for i in range(0,np.max(n)+1)])\n",
        "  return (t,b)\n",
        "\n",
        "\n",
        "#x = (k,n), y = (k,n), x.y = (k,)\n",
        "#dot product of rows, preserving number of columns\n",
        "def rowDP (x,y):\n",
        "  return np.einsum('ij,ij->i', x, y)\n",
        "\n",
        "#x = (k,n), y = (k,n), x.y = (n,)\n",
        "#dot product of columns, preserving number of rows\n",
        "#row vectors always come out as column vectors in numpy\n",
        "def colDP (x,y):\n",
        "  return np.einsum('ij,ij->j', x, y)\n",
        "\n",
        "\n",
        "#pvec is 6 x N x,y,z mx, my, mz\n",
        "#mx,my,mz includes the u0/4pi\n",
        "#B = 3 x N\n",
        "#G = 3 x 6 x N => G[i,j,n] = dB[i,n]/dpvec[j,n]\n",
        "#xsensor = 3, (x,y,z)\n",
        "def bField(pvec, xsensor = (0,0,0), calcG = True):\n",
        "\n",
        "\n",
        "  xsensor = np.tile(np.transpose(np.atleast_2d(xsensor)),(1,pvec.shape[1]))\n",
        "  r = pvec[0:3,:]-xsensor\n",
        "  M = pvec[3:]\n",
        "  rs = np.sum(r**2, axis=0)\n",
        "  rs = np.tile(rs,(3,1))\n",
        "  rn5 = rs**-2.5\n",
        "\n",
        "  mdotr = np.tile(colDP(M,r), (3,1))\n",
        " # mdotr = np.tile(M[0,:]*r[0,:] + M[1,:]*r[1,:] + M[2,:]*r[2,:], (3,1))\n",
        "  B = (3*r*mdotr - M*rs)*rn5\n",
        "\n",
        "  #print(B.shape)\n",
        "\n",
        "  G = np.zeros((3,6,B.shape[1]))\n",
        "  #because I tiled rs, rn before, now I need to use rs[0,:] etc\n",
        "  if (calcG):\n",
        "    kd = np.eye(3) #kronecker delta\n",
        "    for i in range(3):\n",
        "      for j in range(3):\n",
        "        G[i,j,:] = -5*B[i,:]*r[j,:]/rs[0,:] + rn5[0,:]*(3*kd[i,j]*mdotr[0,:] + 3*r[i,:]*M[j,:] - 2*M[i,:]*r[j,:]) #dBi/drj\n",
        "        G[i,j+3,:] = (3*r[i,:]*r[j,:] - kd[i,j]*rs[0,:])*rn5[0,:]\n",
        "  return (B,G)\n",
        "\n",
        "\n",
        "def gradientCheckBfield(pvec, xsensor = (0,0,0)):\n",
        "  B,G = bField(pvec, xsensor)\n",
        "  delta = 1E-6\n",
        "  Gnum = 0*G\n",
        "  for j in range(6):\n",
        "    pd = pvec + 0\n",
        "    pd[j,:] = pvec[j,:] + delta\n",
        "    Bd,_ = bField(pd,xsensor)\n",
        "    Gnum[:,j,:] = (Bd-B)/delta\n",
        "  \n",
        "  print(\"rms error = {}\".format(np.sqrt(np.mean((Gnum-G)**2))))\n",
        "\n",
        "  return B,G,Gnum\n",
        "  \n",
        "MAJAXIS = 0\n",
        "MINAXIS = 1\n",
        "THETA = 2\n",
        "BOBROT = 3\n",
        "DPHI = 4\n",
        "\n",
        "MAG0 = 0\n",
        "HEIGHT = 1\n",
        "BOBTILT = 2\n",
        "OFFX = 3\n",
        "OFFY = 4\n",
        "\n",
        "#porbit 0:a , 1:b, 2:theta, 3: bob rotation, 4: delta phi\n",
        "#fixed 0:M, 1:h, 2:tilt 3: offx 4: offy\n",
        "#pvec = 6xN = x,y,z,mx,my,mz\n",
        "#G = 6x10xN = G[i,j,n] = dPvec[i,n]/dporbit[j,n]\n",
        "#G 0 - 4 are porbit, G 5-9 are pfixed\n",
        "def calculateOrbit(porbit, pfixed, phi, L = 1000, calcG = True):\n",
        "  porbit = np.asarray(porbit).astype(float)\n",
        "  pfixed = np.asarray(pfixed).astype(float)\n",
        "  phi = np.asarray(phi).astype(float)\n",
        "\n",
        "  #add a factor of 1E6 to keep M ~ 1\n",
        "  M = 1E6*pfixed[0] #BrV -- gradient component 5\n",
        "  h = pfixed[1] #z0 in mm -- gradient component 6 \n",
        "  tilt = pfixed[2] #tilt from axis in radians -- gradient component 7\n",
        "  offx = pfixed[OFFX]\n",
        "  offy = pfixed[OFFY]\n",
        "  if (porbit.ndim == 1 and len(phi) > 1):\n",
        "    porbit = np.tile(np.transpose(np.atleast_2d(porbit)), (1,len(phi)))\n",
        "  a = porbit[0,:]\n",
        "  b = porbit[1,:]\n",
        "  theta = porbit[2,:]\n",
        "  bobrot = porbit[3,:]\n",
        "  dphi = porbit[4,:]\n",
        "\n",
        "  phi = phi + dphi\n",
        "  \n",
        "\n",
        "  x = a*np.sin(phi)*np.cos(theta) + b*np.cos(phi)*np.sin(theta) + offx\n",
        "  y = a*np.sin(phi)*np.sin(theta) - b*np.cos(phi)*np.cos(theta) + offy\n",
        "  z = h + 0.5*((x-offx)**2 + (y-offy)**2)/L #offset affects magnet position rel to sensors but not bob height\n",
        "  Mx = M*(-(x-offx)/L + np.cos(bobrot)*tilt)\n",
        "  My = M*(-(y-offy)/L + np.sin(bobrot)*tilt)\n",
        "  Mz = M*np.ones(phi.shape)\n",
        "\n",
        "  pvec = np.stack((x,y,z,Mx,My,Mz))\n",
        "\n",
        "  G = np.zeros((6,10,len(phi)))\n",
        "\n",
        "  if (calcG):\n",
        "    G[0,0,:] = np.sin(phi)*np.cos(theta)\n",
        "    G[0,1,:] = np.cos(phi)*np.sin(theta)\n",
        "    G[0,2,:] = -a*np.sin(phi)*np.sin(theta) + b*np.cos(phi)*np.cos(theta)\n",
        "    G[0,4,:] = a*np.cos(phi)*np.cos(theta) - b*np.sin(phi)*np.sin(theta)\n",
        "    G[0,5+OFFX,:] = 1\n",
        "\n",
        "    G[1,0,:] = np.sin(phi)*np.sin(theta)\n",
        "    G[1,1,:] = -np.cos(phi)*np.cos(theta)\n",
        "    G[1,2,:] = a*np.sin(phi)*np.cos(theta) + b*np.cos(phi)*np.sin(theta)\n",
        "    G[1,4,:] = a*np.cos(phi)*np.sin(theta) + b*np.sin(phi)*np.cos(theta)\n",
        "    G[1,5+OFFY,:] = 1\n",
        "\n",
        "    G[2,0:3,:] = np.stack((x,x,x))*G[0,0:3,:]/L + np.stack((y,y,y)*G[1,0:3,:])/L\n",
        "    G[2,4,:] = x*G[0,4,:]/L + y*G[1,4,:]/L\n",
        "    G[2,6,:] = 1\n",
        "\n",
        "    #Mx = M*(-x/L + np.cos(bobrot)*tilt)\n",
        "\n",
        "    G[3,0:3,:] = -M/L * G[0,0:3,:]\n",
        "    G[3,3,:] = -M*tilt*np.sin(bobrot)\n",
        "    G[3,4,:] = -M/L * G[0,4,:]\n",
        "    G[3,5,:] = 1E6*(-(x-offx)/L + np.cos(bobrot)*tilt)\n",
        "    G[3,7,:] = M*np.cos(bobrot)\n",
        "\n",
        "    G[4,0:3,:] = -M/L * G[1,0:3,:]\n",
        "    G[4,3,:] = M*tilt*np.cos(bobrot)\n",
        "    G[4,4,:] = -M/L * G[1,4,:]\n",
        "    G[4,5,:] = 1E6*(-(y-offy)/L + np.sin(bobrot)*tilt)\n",
        "    G[4,7,:] = M*np.sin(bobrot)\n",
        "\n",
        "    G[5,5,:] = 1E6*np.ones(phi.shape)\n",
        "\n",
        "  return pvec,G\n",
        "\n",
        "#Gm = 3 x 6 x N => G[i,j,n] = dB[i,n]/dpvec[j,n]\n",
        "#Go = 6x10xN = G[j,k,n] = dPvec[j,n]/dporbit[k,n]\n",
        "\n",
        "#G = 3 x 10 x N = G[i,k,n] = dB[i,n]/dporbit[k,n]\n",
        "\n",
        "def bFromOrbit (porbit, pfixed, phi, sensorLocation, L = 1000, calcG = True):\n",
        "  pvec, Go = calculateOrbit(porbit, pfixed, phi, L, calcG)\n",
        "  B,Gm = bField(pvec, sensorLocation, calcG)\n",
        "  if (calcG):\n",
        "    G = np.einsum('ijn,jkn->ikn', Gm, Go)\n",
        "  else:\n",
        "    G = 0\n",
        "  return B,G\n",
        "\n",
        "\n",
        "def gradientCheckBfieldOrbit(porbit, pfixed, phi, xsensor = (0,0,0), L = 1000):\n",
        "  porbit = np.asarray(porbit).astype(float)\n",
        "  pfixed = np.asarray(pfixed).astype(float)\n",
        "  phi = np.asarray(phi).astype(float)\n",
        "  B,G = bFromOrbit(porbit, pfixed, phi, xsensor,L)\n",
        "  delta = 1E-9\n",
        "  Gnum = np.zeros(G.shape)\n",
        "  for j in range(len(porbit)):\n",
        "    pd = np.zeros(porbit.shape)\n",
        "    pd[j] = delta\n",
        "    Bd,_ = bFromOrbit(porbit + pd, pfixed, phi, xsensor, L)\n",
        "    Gnum[:,j,:] = (Bd-B)/delta\n",
        "\n",
        "\n",
        "  for j in range(3):\n",
        "    pd = pfixed + 0\n",
        "    pd[j] = pfixed[j] + delta\n",
        "    Bd,_ = bFromOrbit(porbit, pd, phi, xsensor)\n",
        "    Gnum[:,5+j,:] = (Bd-B)/delta\n",
        "\n",
        "  print(\"rms error = {:e}\".format(np.sqrt(np.mean((Gnum-G)**2))))\n",
        "\n",
        "  return B,G,Gnum\n",
        "\n",
        "\n",
        "def gradientCheckOrbit(porbit, pfixed, phi, L = 1000):\n",
        "  porbit = np.asarray(porbit).astype(float)\n",
        "  pfixed = np.asarray(pfixed).astype(float)\n",
        "  phi = np.asarray(phi).astype(float)\n",
        "  pv,G = calculateOrbit(porbit, pfixed, phi, L)\n",
        "  delta = 1E-9\n",
        "  Gnum = np.zeros(G.shape)\n",
        "  for j in range(len(porbit)):\n",
        "    pd = np.zeros(porbit.shape)\n",
        "    pd[j] = delta\n",
        "    pvd,_ = calculateOrbit(porbit + pd, pfixed, phi, L)\n",
        "    Gnum[:,j,:] = (pvd-pv)/delta\n",
        "\n",
        "  for j in range(len(pfixed)):\n",
        "    pd = np.zeros(pfixed.shape)\n",
        "    pd[j] = delta\n",
        "    pvd,_ = calculateOrbit(porbit, pfixed+pd, phi, L)\n",
        "    Gnum[:,len(porbit)+j,:] =  (pvd-pv)/delta\n",
        "\n",
        "  print(\"rms error = {:e}\".format(np.sqrt(np.mean((Gnum-G)**2))))\n",
        "  return pv,G,Gnum\n",
        "\n",
        "\n",
        "def bfieldPrediction(e, porbit, pfixed):\n",
        "  phi = e.orbit.phi(e.mag.t)\n",
        "  print(phi.shape)\n",
        "  \n",
        "  return np.array([bFromOrbit(porbit, pfixed, phi,  e.mag.sensorLoc[j], e.L)[0] for j in range(len(e.mag.sensorLoc))])\n",
        "  \n",
        "\n",
        "def bfieldObjective(e, porbit, pfixed, binds = None, calcG = True):\n",
        "  if binds is None:\n",
        "    binds = range(len(e.mag.t))\n",
        "\n",
        "  \n",
        "  phi = e.orbit.phi(e.mag.t[binds])\n",
        "  obj = 0\n",
        "  G = 0 #size will be set by first plus operation\n",
        "  \n",
        "  \n",
        "  magB = e.mag.B[:,:,binds] #have to do it in 2 steps to preserve shape - python is terrible!\n",
        "  den = magB.size #scale objective to not be huge\n",
        "\n",
        "  for j in range(len(e.mag.sensorLoc)):\n",
        "    [B,Gb] = bFromOrbit (porbit, pfixed, phi, e.mag.sensorLoc[j], e.L, calcG)\n",
        "    dB = B - magB[j,:,:]\n",
        "    obj = obj + 0.5*np.sum(dB**2)\n",
        "    if (calcG):\n",
        "      G = G + np.einsum('in,ijn->jn', dB, Gb)\n",
        "  return obj/den,G/den\n",
        "  #return obj, G\n",
        "\n",
        "def bfieldPredictionLinearInterp(e, t, po, pfixed, binds = None):\n",
        "  if binds is None:\n",
        "    binds = range(len(e.mag.t))\n",
        "  pfixed = np.asarray(pfixed)\n",
        "  si = scipy.interpolate.interp1d(t, po)\n",
        "  porbit = si(e.mag.t[binds])\n",
        "  return bfieldPrediction(e, porbit, pfixed)\n",
        "  \n",
        "\n",
        "def continuityObjAndGradient (po, continuityWeight = 1):\n",
        "  dpo = np.diff(po, axis = 1)\n",
        "  obj = 0.5*np.sum(dpo**2)\n",
        "  G = np.zeros(po.shape)\n",
        "  G[:,1:] = dpo\n",
        "  G[:,:-1] = G[:,:-1] - dpo\n",
        "  return obj*continuityWeight, G*continuityWeight\n",
        "\n",
        "\n",
        "\n",
        "  \n",
        "#  mdotr = np.tile(colDP(M,r), (3,1))\n",
        "\n",
        "def bfieldObjectiveLinearInterp(e, t, po, pfixed, binds = None, calcG = True, continuityWeight = 1):\n",
        "  if binds is None:\n",
        "    binds = range(len(e.mag.t))\n",
        "  si = scipy.interpolate.interp1d(t, po)\n",
        "  porbit = si(e.mag.t[binds])\n",
        " \n",
        "  obj,Gi = bfieldObjective(e,porbit,pfixed, binds, calcG)\n",
        "\n",
        "  co,cG = continuityObjAndGradient(po, continuityWeight)\n",
        "\n",
        "\n",
        "  if not(calcG):\n",
        "    return obj+co,0,0\n",
        "  \n",
        "\n",
        "  wi = scipy.interpolate.interp1d(t,np.arange(len(t)))\n",
        "  w = wi(e.mag.t[binds]) #fractional bin location \n",
        "  low = np.floor(w)\n",
        "  hi = np.ceil(w)\n",
        "  wlow = hi-w\n",
        "  whi = 1-wlow\n",
        "\n",
        "  #Gi is 10xNmag\n",
        "  #po is 5xNt\n",
        "  #pfixed is 5\n",
        "  G = np.zeros(po.shape)\n",
        "  for j in range(po.shape[0]):\n",
        "    G[j,:] = np.bincount(low.astype(int), wlow*Gi[j,:],minlength=po.shape[1]) + np.bincount(hi.astype(int), whi*Gi[j,:],minlength=po.shape[1]) \n",
        "  \n",
        "  Gf = np.sum(Gi[5:], axis=1)\n",
        "\n",
        "  return obj+co,G+cG,Gf\n",
        "\n",
        "\n",
        "def bfieldObjectiveExperiment(e,t,pvec,staticOrbit, staticFixedParameters, binds = None, calcG = True, orbit_inds = np.arange(5), fp_inds = np.arange(5), continuityWeight = 100):\n",
        "  po, pfixed = pvecToParameters (pvec, staticOrbit, staticFixedParameters, orbit_inds, fp_inds)\n",
        "  obj, G, Gf = bfieldObjectiveLinearInterp(e, t, po, pfixed, binds, calcG, continuityWeight = continuityWeight)\n",
        "  if calcG:\n",
        "    return obj, parametersToPvec(G[orbit_inds,:],Gf[fp_inds])\n",
        "  else:\n",
        "    return obj, 0\n",
        "\n",
        "def fitInterval(e,t, pfixed_init, po_init = None, dtmag = None, orbit_inds = np.arange(5), fp_inds = np.arange(5), continuityWeight = 1):\n",
        "  if po_init is None:\n",
        "      si = scipy.interpolate.interp1d(e.orbit.tcross, (e.orbit.majaxis, e.orbit.minaxis, e.orbit.theta, 0*e.orbit.theta, 0*e.orbit.theta))\n",
        "      po_init = si(t)\n",
        "  if dtmag is None:\n",
        "    binds = np.logical_and(e.mag.t >= t[0], e.mag.t <= t[-1])\n",
        "  else:\n",
        "    t0 = np.min(e.mag.t[e.mag.t >= t[0]])\n",
        "    t1 = np.max(e.mag.t[e.mag.t <= t[-1]])\n",
        "    binds = np.unique(np.round(np.interp(np.arange(t0, t1, dtmag), e.mag.t, np.arange(len(e.mag.t))))).astype(int)\n",
        "  \n",
        "  x0 = parametersToPvec(po_init[orbit_inds,:], pfixed_init[fp_inds])\n",
        "\n",
        "  #constraints = getBounds(orbit_inds, fp_inds, len(t))\n",
        "\n",
        "  objfun = lambda x : bfieldObjectiveExperiment(e, t, x, po_init, pfixed_init, binds, calcG = False, orbit_inds = orbit_inds, fp_inds = fp_inds, continuityWeight = continuityWeight)[0]\n",
        "  gradfun = lambda x : bfieldObjectiveExperiment(e, t, x, po_init, pfixed_init, binds, calcG = True, orbit_inds = orbit_inds, fp_inds = fp_inds, continuityWeight = continuityWeight)[1]\n",
        "\n",
        "\n",
        "  #print (\"initial objective: {:.3e}\".format(objfun(x0)))\n",
        "  res = scipy.optimize.minimize(objfun, x0, jac=gradfun, bounds= getBounds(orbit_inds, fp_inds, len(t))) #\n",
        "  #print (\"final objective: {:.3e}\".format(objfun(res.x)))\n",
        "\n",
        "\n",
        "  if (not(res.success)):\n",
        "    print(res.message)\n",
        "\n",
        "  #po, pf\n",
        "  return pvecToParameters(res.x, po_init, pfixed_init, orbit_inds = orbit_inds, fp_inds = fp_inds)\n",
        "\n",
        "def testGradient(e,t, pfixed_init, po_init = None, dtmag = None, orbit_inds = np.arange(5), fp_inds = np.arange(5)):\n",
        "  if po_init is None:\n",
        "      si = scipy.interpolate.interp1d(e.orbit.tcross, (e.orbit.majaxis, e.orbit.minaxis, e.orbit.theta, 0*e.orbit.theta, 0*e.orbit.theta))\n",
        "      po_init = si(t)\n",
        "  if dtmag is None:\n",
        "    binds = np.logical_and(e.mag.t >= t[0], e.mag.t <= t[-1])\n",
        "  else:\n",
        "    t0 = np.min(e.mag.t[e.mag.t >= t[0]])\n",
        "    t1 = np.max(e.mag.t[e.mag.t <= t[-1]])\n",
        "    binds = np.unique(np.round(np.interp(np.arange(t0, t1, dtmag), e.mag.t, np.arange(len(e.mag.t))))).astype(int)\n",
        "  \n",
        "  x0 = parametersToPvec(po_init[orbit_inds,:], pfixed_init[fp_inds])\n",
        "  print(x0[:5])\n",
        "\n",
        "  objfun = lambda x : bfieldObjectiveExperiment(e, t, x, po_init, pfixed_init, binds, False, orbit_inds = orbit_inds, fp_inds = fp_inds)[0]\n",
        "  gradfun = lambda x : bfieldObjectiveExperiment(e, t, x, po_init, pfixed_init, binds, True, orbit_inds = orbit_inds, fp_inds = fp_inds)[1]\n",
        "\n",
        "  delta = 1e-2\n",
        "  G = gradfun(x0)\n",
        "  Gn = np.zeros(G.shape)\n",
        "  f0 = objfun(x0)\n",
        "  for j in range(len(G)):\n",
        "    d = np.zeros(x0.shape)\n",
        "    d[j] = delta\n",
        "    Gn[j] = (objfun(x0 + d) - f0)/delta\n",
        "\n",
        "  fractionalError = 2*np.abs(Gn-G)/np.abs(Gn+G+1e-12)\n",
        "  print(\"rms fractional error = {:e}\".format(np.sqrt(np.mean((fractionalError)**2))))\n",
        "  print(\"max fractional error = {:e}\".format(np.max(fractionalError)))\n",
        "\n",
        "  return fractionalError,G,Gn\n",
        "\n",
        "def fitOrbit (e,pfixed_init, i, lastOrbit = None, dtmag = None):\n",
        "  if i > 0:\n",
        "    inds = np.array((i-1,i))\n",
        "  else:\n",
        "    inds = np.array((0,1))\n",
        "  t = e.orbit.tcross[inds]\n",
        "  po_init =  np.stack((e.orbit.majaxis[inds], e.orbit.minaxis[inds], e.orbit.theta[inds], 0*e.orbit.theta[inds], 0*e.orbit.theta[inds]))\n",
        "  if not (lastOrbit is None):\n",
        "    po_init[:,0] = lastOrbit\n",
        "    po_init[3:,1] = lastOrbit[3:]\n",
        "\n",
        "  po, pf = fitInterval(e,t,pfixed_init, po_init, dtmag)\n",
        "  if (pf[BOBTILT] < 0):\n",
        "      pf[BOBTILT] = -pf[BOBTILT]\n",
        "      po[BOBROT,:] = np.unwrap(po[BOBROT,:] + np.array((0,np.pi)))[1]\n",
        "\n",
        "  if i > 0:\n",
        "    return po[:,1], pf\n",
        "  else:\n",
        "    return po[:,0], pf\n",
        "  \n",
        "def fitExperimentFirstPass(e):\n",
        "  M,h = estimateMandh(e)\n",
        "  pfixed_init = np.array((M,h,0.1,0,0))\n",
        "  \n",
        "  porbit =  np.stack((e.orbit.majaxis, e.orbit.minaxis, e.orbit.theta, 0*e.orbit.theta, 0*e.orbit.theta))\n",
        "  orbit_inds = (BOBROT,)\n",
        "#  fixed_inds = (BOBTILT, OFFX, OFFY)\n",
        "\n",
        "  po, pf = fitInterval(e, e.orbit.tcross, pfixed_init, dtmag = 0.1, orbit_inds = orbit_inds)\n",
        "\n",
        "  return (po,pf)\n",
        "\n",
        "def fitExperiment(e, continuityWeight = 100):\n",
        "\n",
        "\n",
        "  #find initial guesses for global parameters and bob rotation\n",
        "  start = time.time()\n",
        "  print ('1/4: calculating initial guess for magnet parameters')\n",
        "  po,pf = fitExperimentFirstPass(e)\n",
        "\n",
        "  n1 = 25\n",
        "  t = np.linspace(e.orbit.tcross[0], e.orbit.tcross[-1], n1)\n",
        "\n",
        "  cwadj = (np.mean(np.diff(e.orbit.tcross))/np.mean(np.diff(t)))**2 #weight continuity by inverse time step squared\n",
        "\n",
        "  si = scipy.interpolate.interp1d(e.orbit.tcross, po)\n",
        "\n",
        "\n",
        "  print ('elapsed time: {:.1f}s'.format(time.time() - start))\n",
        "  print ('2/4: calculating orbits spaced over experiment duration')\n",
        "  po,pf = fitInterval(e, t, pf, si(t), dtmag = 0.2, continuityWeight = continuityWeight*cwadj)\n",
        "\n",
        "  \n",
        "  si = scipy.interpolate.interp1d(t, po)\n",
        "\n",
        "\n",
        "  print ('elapsed time: {:.1f}s'.format(time.time() - start))\n",
        "  print ('3/4: fitting every orbit together')\n",
        "  po,pf = fitInterval(e, e.orbit.tcross, pf, si(e.orbit.tcross), dtmag = 0.1, continuityWeight = continuityWeight)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "  print ('elapsed time: {:.1f}s'.format(time.time() - start))\n",
        "  print ('4/4: fitting every orbit together, with higher temporal resolution')\n",
        "  po,pf = fitInterval(e, e.orbit.tcross, pf, po, continuityWeight = continuityWeight*4)\n",
        "\n",
        "\n",
        "\n",
        "  fitResults = emptystruct()\n",
        "  fitResults.t = e.orbit.tcross\n",
        "  fitResults.po = po\n",
        "  fitResults.pf = pf\n",
        "  fitResults.mag0 = pf[MAG0]\n",
        "  fitResults.height = pf[HEIGHT]\n",
        "  fitResults.offset = pf[np.array((OFFX,OFFY))]\n",
        "  fitResults.tilt = pf[BOBTILT]\n",
        "  fitResults.majaxis = po[MAJAXIS,:]\n",
        "  fitResults.minaxis = po[MINAXIS,:]\n",
        "  fitResults.theta = po[THETA,:]\n",
        "\n",
        "\n",
        "  e.fitResults = fitResults\n",
        "\n",
        "\n",
        "  print ('done! elapsed time: {:.1f}s'.format(time.time() - start))\n",
        "\n",
        "  return fitResults\n",
        "\n",
        "\n",
        "def estimateMandh (e):\n",
        "\n",
        "\n",
        "  t = e.orbit.tcross\n",
        "  norbit = np.min((10,len(t)))\n",
        "\n",
        "  po,pf = fitInterval(e, t[:norbit], np.array((-10,30,0,0,0)), dtmag = 0.1, fp_inds = np.arange(2), orbit_inds = np.zeros(5).astype(bool))\n",
        "  return pf[:2]\n",
        "  po = np.stack((e.orbit.majaxis, e.orbit.minaxis, e.orbit.theta, 0*e.orbit.theta, 0*e.orbit.theta))\n",
        "\n",
        "  \n",
        "  t = t[:norbit]\n",
        "  po = po[:,:norbit]\n",
        "  binds = np.logical_and(e.mag.t >= t[0], e.mag.t < t[-1])\n",
        "\n",
        "\n",
        "  \n",
        "  objfun = lambda x : bfieldObjectiveLinearInterp(e,t,po,(x[0],x[1],0,0,0),binds, False)[0]\n",
        "  gradfun = lambda x : bfieldObjectiveLinearInterp(e,t,po,(x[0],x[1],0,0,0),binds, True)[2][:2]\n",
        "\n",
        "  \n",
        "  res1 = scipy.optimize.minimize(objfun, (100,50))#, jac=gradfun)\n",
        "  res2 = scipy.optimize.minimize(objfun, (-100,50))#, jac=gradfun)\n",
        "\n",
        "  print(res1.message)\n",
        "  print(res2.message)\n",
        "\n",
        "  if (res1.fun < res2.fun):\n",
        "    return res1.x\n",
        "  else:\n",
        "    return res2.x\n",
        "\n",
        "def pvecToParameters (pvec, staticOrbit, staticFixedParameters, orbit_inds = np.arange(5), fp_inds = np.arange(5)):\n",
        " # print(pvec.shape)\n",
        "  nfp = len(fp_inds)\n",
        "  #print(nfp)\n",
        "\n",
        "  pvec = pvec.astype(float)\n",
        "\n",
        "  fp = pvec[:nfp]\n",
        "  no = np.sum(np.ones(5)[orbit_inds]).astype(int)\n",
        "\n",
        "  porbit = np.asarray(staticOrbit)\n",
        "  if (no > 0):\n",
        "    orbitp = np.reshape(pvec[nfp:],(no,-1))\n",
        "    porbit[orbit_inds,:] = orbitp\n",
        "  fixedParams = np.asarray(staticFixedParameters).astype(float)\n",
        "  fixedParams[fp_inds] = fp\n",
        "  return porbit.astype(float), fixedParams.astype(float)\n",
        "\n",
        "def getBounds (orbit_inds, fp_inds, num_orbits):\n",
        "  uob = np.zeros((5,num_orbits))\n",
        "  lob = np.zeros((5,num_orbits))\n",
        "  ufb = np.zeros(5)\n",
        "  lfb = np.zeros(5)\n",
        "\n",
        "  uob[MAJAXIS,:] = 1000\n",
        "  lob[MAJAXIS,:] = 0\n",
        "  uob[MINAXIS,:] = 100\n",
        "  lob[MINAXIS,:] = -100\n",
        "  uob[THETA,:] = np.pi*2.5\n",
        "  lob[THETA,:] = -0.5*np.pi\n",
        "  uob[BOBROT,:] = 1000*np.pi\n",
        "  lob[BOBROT,:] = -1000*np.pi\n",
        "  uob[DPHI, :] = 0.1\n",
        "  lob[DPHI,:] = -0.1\n",
        "\n",
        "  ufb[MAG0] = 1000 #factor of 10^6 included\n",
        "  lfb[MAG0] = -1000\n",
        "  ufb[HEIGHT] = 200\n",
        "  lfb[HEIGHT] = 0\n",
        "  ufb[BOBTILT] = 0.5 #30 degrees\n",
        "  lfb[BOBTILT] = 0\n",
        "  ufb[OFFX] = 10\n",
        "  lfb[OFFX] = -10\n",
        "  ufb[OFFY] = 10\n",
        "  lfb[OFFY] = -10\n",
        "\n",
        "  ub = parametersToPvec(uob[orbit_inds,:], ufb[fp_inds])\n",
        "  lb = parametersToPvec(lob[orbit_inds,:], lfb[fp_inds])\n",
        "  A = np.eye(len(ub))\n",
        "\n",
        "  return scipy.optimize.Bounds(lb,ub)\n",
        "\n",
        "\n",
        "def parametersToPvec (porbit, pfixed):\n",
        "  return np.concatenate((pfixed.astype(float),np.ravel(porbit.astype(float))))\n",
        "\n",
        "def plotFitResults(e):\n",
        "  plt.plot(e.orbit.tcross, e.orbit.theta*180/np.pi, e.fitResults.t, e.fitResults.theta*180/np.pi)\n",
        "  plt.legend(('from LabView','final fit'))\n",
        "  plt.xlabel('t (s)')\n",
        "  plt.ylabel('maj axis angle (deg)')\n",
        "  plt.show()\n",
        "  plt.plot(e.orbit.tcross, e.orbit.majaxis, e.fitResults.t, e.fitResults.majaxis)\n",
        "  plt.legend(('from LabView','final fit'))\n",
        "  plt.xlabel('t (s)')\n",
        "  plt.ylabel('maj axis (mm)')\n",
        "  plt.show()\n",
        "  plt.plot(e.orbit.tcross, e.orbit.minaxis, e.fitResults.t, e.fitResults.minaxis)\n",
        "  plt.legend(('from LabView','final fit'))\n",
        "  plt.xlabel('t (s)')\n",
        "  plt.ylabel('min axis (mm)')\n",
        "  plt.show()\n",
        "\n",
        "\n",
        "    \n",
        "def updateExperiments(startdir, experiments, continuityWeight = 50):\n",
        "  #plt.rcParams['figure.figsize'] = [12, 5]\n",
        "  orbitFiles = findOrbitFiles(startdir)\n",
        "  for file in orbitFiles:\n",
        "    found = False\n",
        "    for e in experiments:\n",
        "      if os.path.normpath(file) == os.path.normpath(e.orbitPath):\n",
        "        found = True\n",
        "    if not(found):\n",
        "      print('loading and fitting: {}'.format(file))\n",
        "      e = loadAndParseData(file)\n",
        "      fitExperiment(e, continuityWeight)\n",
        "      experiments.append(e)\n",
        "      plotFitResults(e)\n",
        "      print('{}/{} experiments fit'.format(len(experiments), len(orbitFiles)))\n",
        "\n",
        "initialBlockRun = True"
      ],
      "metadata": {
        "id": "lnxPUvbn9OTy",
        "cellView": "form"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Run me once at the beginning\n",
        "\n",
        "rerun to reset everything and start over\n",
        "\n",
        "**Make sure you edit the cell to put in the appropriate values first**"
      ],
      "metadata": {
        "id": "w85X59DvvwTA"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YMrOksDbefDn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c12ea455-2aa1-409c-e02b-5f03960b0d51"
      },
      "source": [
        "try:\n",
        "  if not(initialBlockRun):\n",
        "    raise\n",
        "except:\n",
        "  print (\"you need to run the code block above first!\")\n",
        "else:  \n",
        "  experiments = []\n",
        "  setupNumber = 6\n",
        "  section = 1 # 1 = T AM, 2 = T PM, 3 = W \n",
        "  date = \"21-Mar-2023\" #change to the date of the experiment\n",
        "  angleOfWall = 141.6 #enter the angle of the major axis IN DEGREES according to your setup when the bob is swinging parallel to the wall\n",
        "  mass = .550 #bob mass in kg\n",
        "  energyCalibrationFactor = 297.3 #energy calibration factor you determined \n",
        "  # MODIFY THIS LINE SO THAT THE URL POINTS TO YOUR DATA REPOSITORY by replacing \"your_github_username\" with your github user name \n",
        "  # DO NOT delete the \"data\" at the end of the line \n",
        "  !rm -rf /content/data\n",
        "  !git clone https://github.com/NYU-IEP-2022-3-Classroom/lab7-data-repository-nfk9564 data #replace XXXX with your github user name - do not erase the \"data\" afterwards\n",
        "  startdir = '/content/data'"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'data'...\n",
            "remote: Enumerating objects: 173, done.\u001b[K\n",
            "remote: Counting objects: 100% (173/173), done.\u001b[K\n",
            "remote: Compressing objects: 100% (153/153), done.\u001b[K\n",
            "remote: Total 173 (delta 19), reused 167 (delta 14), pack-reused 0\u001b[K\n",
            "Receiving objects: 100% (173/173), 32.53 MiB | 21.19 MiB/s, done.\n",
            "Resolving deltas: 100% (19/19), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UbYl-kyFh7oz"
      },
      "source": [
        "## Run this block everytime you add data to your github repository\n",
        "1. `!git -C /content/data pull` : load new  data from your github repository \n",
        "\n",
        "2. `updateExperiments(startdir, experiments)` : fit any new data to find angles and orbit parameters: \n",
        "\n",
        "3. plots fit angle and major, minor axes vs. time for new fits"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M8UjZnB5vObl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "376bc976-e122-497d-e8f5-5676feac281a"
      },
      "source": [
        "!git -C /content/data pull\n",
        "updateExperiments(startdir, experiments)\n",
        "\n",
        "for e in experiments:\n",
        "  print('{}: offset = {:.1f}mm, {:.1f}mm \\t tilt = {:.1f} deg \\t MAG0 = {:.0f} arb units\\t'.format(os.path.basename(e.orbitPath), e.fitResults.offset[0], e.fitResults.offset[1], np.rad2deg(e.fitResults.tilt), e.fitResults.mag0))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Already up to date.\n",
            "loading and fitting: /content/data/driven/20230321111146/20230321111146_orbit.txt\n",
            "1/4: calculating initial guess for magnet parameters\n",
            "elapsed time: 6.1s\n",
            "2/4: calculating orbits spaced over experiment duration\n",
            "elapsed time: 18.9s\n",
            "3/4: fitting every orbit together\n",
            "elapsed time: 36.6s\n",
            "4/4: fitting every orbit together, with higher temporal resolution\n",
            "done! elapsed time: 144.4s\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/15 experiments fit\n",
            "loading and fitting: /content/data/driven/20230321111818/20230321111818_orbit.txt\n",
            "1/4: calculating initial guess for magnet parameters\n",
            "elapsed time: 11.4s\n",
            "2/4: calculating orbits spaced over experiment duration\n",
            "elapsed time: 28.8s\n",
            "3/4: fitting every orbit together\n",
            "elapsed time: 91.6s\n",
            "4/4: fitting every orbit together, with higher temporal resolution\n",
            "done! elapsed time: 194.2s\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2/15 experiments fit\n",
            "loading and fitting: /content/data/driven/20230321112648/20230321112648_orbit.txt\n",
            "1/4: calculating initial guess for magnet parameters\n",
            "elapsed time: 3.0s\n",
            "2/4: calculating orbits spaced over experiment duration\n",
            "elapsed time: 7.7s\n",
            "3/4: fitting every orbit together\n",
            "elapsed time: 16.9s\n",
            "4/4: fitting every orbit together, with higher temporal resolution\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AMRZJ4X1lRSt"
      },
      "source": [
        "## Run this block to save your data to a json file\n",
        "This stores the experimental parameters you entered and the fitting results (but NOT the raw magnetometer data) to a single text file in json format. \n",
        "\n",
        "**you should copy this file to your individual github repository AND to the shared class repository**\n",
        "\n",
        "1. open the file explorer to the left, click on the dots next to the file name and download to the local computer\n",
        "2. copy the file into the local github repository location, then use github desktop to sync OR use the web interface to upload directly\n",
        "3. use the web interface to upload the same file to the class repository - don't forget to enter a commit message and save. Note that your commit messages will be publicly visible to the world, so don't include your name or any naughty words.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7B8LIoN_3A6y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fc530a2d-8597-4e7a-ba65-56add8ca3de3"
      },
      "source": [
        "fits = []\n",
        "for e in experiments:\n",
        "  fits.append({\"orbitPath\":e.orbitPath, \"magPath\":e.magPath, \"pulsePath\":e.pulsePath, \"period\":e.period, \"L\":e.L, \"MAG0\":e.fitResults.mag0, \"t\":e.fitResults.t.tolist(), \"majaxis\":e.fitResults.majaxis.tolist(), \"minaxis\":e.fitResults.minaxis.tolist(), \"theta\":e.fitResults.theta.tolist(),\n",
        "               \"phaseOffset\":e.fitResults.po[DPHI,:].tolist(), \"fixedParams\":e.fitResults.pf.tolist(), \"orbitParams\":e.fitResults.po.tolist(), \n",
        "               \"t_labview\":e.orbit.tcross.tolist(), \"majaxis_labview\":e.orbit.majaxis.tolist(), \"minaxis_labview\":e.orbit.minaxis.tolist(), \"theta_labview\":e.orbit.theta.tolist(),            \n",
        "               \"pulseEnergy\":e.pulse.U.tolist(), \"pulseTime\":e.pulse.t.tolist()})\n",
        "results = {\"setupNumber\":setupNumber, \"section\":section, \"thetaWall\":np.deg2rad(angleOfWall), \"mass\":mass, \"energyCalibrationFactor\":energyCalibrationFactor, \"fits\":fits}\n",
        "outputname = 'section{:d}setup{:d}-{}.json'.format(int(section), int(setupNumber), date)\n",
        "file = open(outputname, 'w')\n",
        "json.dump(results, file)\n",
        "file.close()\n",
        "\n",
        "print('data saved in {} - BE SURE TO COPY TO YOUR GITHUB'.format(outputname))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "data saved in section42setup99-21-Nov-2021.json - BE SURE TO COPY TO YOUR GITHUB\n"
          ]
        }
      ]
    }
  ]
}